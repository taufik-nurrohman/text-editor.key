extends _index.pug

block state
  - const scripts = ['../text-editor/index.min.js', 'index.min.js']
  - const styles = ['../layout/index.min.css']
  - const theme = '#000'
  - const title = 'Text Editor Key ' + version

block script
  script
    | const editor = new TextEditor(document.querySelector('textarea'), {
    |     with: [TextEditor.Key]
    | });
    |
    | editor.command('bold', function () {
    |     return this.wrap('<b>', '</b>'), false;
    | });
    |
    | editor.key('Control-b', 'bold');
    |
    | editor.key('Control-i', function () {
    |     return this.wrap('<i>', '</i>'), false;
    | });
    |
    | editor.on('key.down', function () {
    |     console.log(this.k());
    | });

block style
  style
    | body {
    |   margin-left: auto;
    |   margin-right: auto;
    |   max-width: 60rem;
    | }

block content
  header
    hgroup
      h1
        a(href='../text-editor/index.html#extensions') &laquo;
        = ' ' + title
      p This extension provides a feature to easily interact with the keyboard keys.
  main
    p
      textarea(spellcheck='false' style={
        'display': 'block',
        'width': '100%'
      }) abcdef
    p(role='note') Try to press #[kbd Control] + #[kbd b] or #[kbd Control] + #[kbd i] in the text area above!
    h2#usage
      a(href='#usage') #
      = ' Usage'
    h4 Browser
    pre: code
      | &lt;script src="#[a(href='../text-editor/index.min.js' target='_blank') ./text-editor/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script src="#[a(href='index.min.js' target='_blank') ./text-editor.key/index.min.js]"&gt;&lt;/script&gt;
      | &lt;script&gt;
      |
      |   const editor = new TextEditor(document.querySelector('textarea'), {
      |       with: [TextEditor.Key]
      |   });
      |
      |   editor.command('bold', function () {
      |       return this.wrap('&lt;b&gt;', '&lt;/b&gt;'), false;
      |   });
      |
      |   editor.key('Control-b', 'bold');
      |
      |   editor.key('Control-i', function () {
      |       return this.wrap('&lt;i&gt;', '&lt;/i&gt;'), false;
      |   });
      |
      | &lt;/script&gt;
    h4 CommonJS
    pre: code
      | const TextEditor = require('@taufik-nurrohman/text-editor').default;
      | const TextEditorKey = require('@taufik-nurrohman/text-editor.key').default;
      |
      | TextEditor.state.with.push(TextEditorKey); // Load as a core extension
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     with: [TextEditorKey] // Load as an optional extension
      | });
      |
      | editor.command('bold', function () {
      |     return this.wrap('&lt;b&gt;', '&lt;/b&gt;'), false;
      | });
      |
      | editor.key('Control-b', 'bold');
      |
      | editor.key('Control-i', function () {
      |     return this.wrap('&lt;i&gt;', '&lt;/i&gt;'), false;
      | });
    h4 ECMAScript
    pre: code
      | import TextEditor from '@taufik-nurrohman/text-editor';
      | import TextEditorKey from '@taufik-nurrohman/text-editor.key';
      |
      | TextEditor.state.with.push(TextEditorKey); // Load as a core extension
      |
      | const editor = new TextEditor(document.querySelector('textarea'), {
      |     with: [TextEditorKey] // Load as an optional extension
      | });
      |
      | editor.command('bold', function () {
      |     return this.wrap('&lt;b&gt;', '&lt;/b&gt;'), false;
      | });
      |
      | editor.key('Control-b', 'bold');
      |
      | editor.key('Control-i', function () {
      |     return this.wrap('&lt;i&gt;', '&lt;/i&gt;'), false;
      | });
    h2#methods
      a(href='#methods') #
      = ' Methods'
    h3 Instance Methods
    h4: code editor.command(command, of)
    p Add a command to be used later by the #[code editor.key()] method.
    pre: code
      | editor.command('bold', function () {
      |     this.wrap('&lt;b&gt;', '&lt;/b&gt;');
      |     return false; // Prevent normal keyboard behavior by returning `false`
      | });
    h4: code editor.k(join = '-')
    p Return the current key combination.
    pre: code
      | console.log(editor.k());
      | console.log(editor.k('\n'));
      | console.log(editor.k(false));
    h4: code editor.key(key, of)
    p Add a command that will be executed when a certain keyboard key combination is pressed.
    pre: code
      | editor.key('Control-b', 'bold'); // This will execute `editor.commands.bold()` if exists
    pre: code
      | editor.key('Control-b', function () {
      |     this.wrap('&lt;b&gt;', '&lt;/b&gt;');
      |     return false; // Prevent normal keyboard behavior by returning `false`
      | });
    h2#properties
      a(href='#properties') #
      = ' Properties'
    h3 Instance Properties
    h4: code editor.commands
    p List of commands.
    pre: code
      | console.log(editor.commands);
    h4: code editor.keys
    p List of keyboard key combinations.
    pre: code
      | console.log(editor.keys);
  footer
    hr
    p
      != '&copy; ' + year + ' '
      a(href='/') Taufik Nurrohman